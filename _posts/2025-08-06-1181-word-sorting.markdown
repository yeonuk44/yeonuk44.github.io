---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
lng_pair: id-1181-word-sorting
title: Baekjun No. 1181, word alignment (with.Java)
# title: Baekjoon Problem 1181, Word Sorting (with Java)
# post specific
# if not specified, .name will be used from _data/owner/[language].yml
author: Yeonuk
# multiple categories is not supported
category: Java
# multiple tag entries are possible
tags: [java, coding test]
#thumbnailimageforpost
img: ":post_pic1.jpg"
# disable comments on this page
# comments_disable: true

# publish date
date: 2025-08-06 09:00:00 +0900
#seo
# if not specified, date will be used.
#meta_modify_date: 2021-08-10 11:32:53 +0900
# check the meta_common_description in _data/owner/[language].yml
#meta_description: ""

#optional
#please use the "image_viewer_on" below to enable image viewer for individual pages or posts (_posts/ or [language]/_posts folders).
# image viewer can be enabled or disabled for all posts using the "image_viewer_posts: true" setting in _data/conf/main.yml.
#image_viewer_on: true
#please use the "image_lazy_loader_on" below to enable image lazy loader for individual pages or posts (_posts/ or [language]/_posts folders).
# The image lazy loader can be enabled or disabled for all posts using the "image_lazy_loader_posts: true" setting in _data/conf/main.yml.
#image_lazy_loader_on: true
# exclude from on-site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---

<!-- outline-start -->

## This article explores Baekjoon Problem 1181, Word Sorting (with Java).

We will learn by solving coding test problems, reflecting on previous problems, and exploring different solution methods.

Let's first look at the problem.

{:data-align="center"}

<!-- outline-end -->

### Problem

Write a program that sorts N words consisting of lowercase letters according to the following conditions.

#### Input

The first line contains the number of words, N.

(1 ≤ N ≤ 20,000). Starting from the second line, N lines contain words, one per line, each consisting of lowercase letters.

The length of the given string does not exceed 50.

#### Output

Sort the words according to the given condition and output them.

### Problem Solution

```java
import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;

class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.valueOf(br.readLine());
        String[] arr = new String[N];
        for(int i = 0; i < N; i++){
            arr[i] = br.readLine();
        }

        for(int i = 0; i < N; i++){
            for(int j = i + 1; j < N; j++){
                if(arr[i].length() == arr[j].length()){
                    if(arr[i].compareTo(arr[j]) > 0){
                        String temp = arr[j];
                        arr[j] = arr[i];
                        arr[i] = temp;
                    }
                }else{
                    if(arr[i].length() > arr[j].length()){
                        String temp = arr[j];
                        arr[j] = arr[i];
                        arr[i] = temp;
                    }
                }
            }
        }
        for(int i = 0; i < N; i++){
                if(i > 0){
                    if(arr[i].compareTo(arr[i - 1]) != 0){
                        System.out.println(arr[i]);
                    }
                }else{
                    System.out.println(arr[i]);
                }
            }
    }
}
```

#### Solution Explanation

This code sorts an array of strings by length and alphabetically, then removes duplicate strings and prints them.

First, it uses a BufferedReader to receive input.

It reads the number of strings N from the first line and stores the N strings in the array arr.

Next, it sorts the array using a double for loop.

There are two criteria for sorting.

First, it sorts the shortest strings first.

Second, if the lengths are the same, they are sorted lexicographically. This process ensures the array is in the desired order.

After sorting is complete, the array is traversed again, removing duplicate strings and outputting them.

The first element of the array is unconditionally output, and subsequent elements are output only if they differ from the previous element.

This process outputs the sorted result with duplicate strings removed.
