---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
lng_pair: id-6148-bookshelf-2
title: Baekjun No. 6148, Bookshelf 2 (with.Java)
# title: Baekjun No. 6148, Bookshelf 2 (with.Java)
# post specific
# if not specified, .name will be used from _data/owner/[language].yml
author: Yeonuk
# multiple category is not supported
category: Java
# multiple tag entries are possible
tags: [java, dfs coding test]
# thumbnail image for post
img: ":post_pic1.jpg"
# disable comments on this page
# comments_disable: true

# publish date
date: 2025-03-07 09:00:00 +0900
# seo
# if not specified, date will be used.
#meta_modify_date: 2021-08-10 11:32:53 +0900
# check the meta_common_description in _data/owner/[language].yml
#meta_description: ""

# optional
# please use the "image_viewer_on" below to enable image viewer for individual pages or posts (_posts/ or [language]/_posts folders).
# image viewer can be enabled or disabled for all posts using the "image_viewer_posts: true" setting in _data/conf/main.yml.
#image_viewer_on: true
# please use the "image_lazy_loader_on" below to enable image lazy loader for individual pages or posts (_posts/ or [language]/_posts folders).
# image lazy loader can be enabled or disabled for all posts using the "image_lazy_loader_posts: true" setting in _data/conf/main.yml.
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---

<!-- outline-start -->

## I learned about Bookshelf 2 (with.Java), Baekjun No. 6148.

I want to solve the coding test problem, find out how to solve it differently from the retrospective of the problem I solved, and get to know.

Let's get to the problem first.

{:data-align="center"}

<!-- outline-end -->

### Problem

Farmer John recently bought another bookshelf for the cow library, but the shelf is getting filled up quite quickly, and now the only available space is at the top.

FJ has N cows (1 <= N <= 20) each with some height of H_i (1 <= H_i <= 1,000,000 - these are very tall cows).

The bookshelf has a height of B (1 <= B <= S, where S is the sum of the heights of all cows).

To reach the top of the bookshelf, one or more of the cows can stand on top of each other in a stack, so that their total height is the sum of each of their individual heights.

This total height must be no less than the height of the bookshelf in order for the cows to reach the top.

Since a taller stack of cows than necessary can be dangerous, your job is to find the set of cows that produces a stack of the smallest height possible such that the stack can reach the bookshelf.

Your program should print the minimal 'excess' height between the optimal stack of cows and the bookshelf.

#### Input

Line 1: Two space-separated integers: N and B

Lines 2..N+1: Line i+1 contains a single integer: H_i

#### Output

Line 1: A single integer representing the (non-negative) difference between the total height of the optimal set of cows and the height of the shelf.

### problem solving

```java
import java.io.*;
import java.util.*;

class Main {
    static int N, B;
    static int[] H;
    static int minExcess = Integer.MAX_VALUE;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        B = Integer.parseInt(st.nextToken());
        H = new int[N];

        for(int i = 0; i < N; i++){
            H[i] = Integer.parseInt(br.readLine());
        }

        dfs(0, 0);
        System.out.println(minExcess);
    }

    static void dfs(int idx, int totalHeight){
        if(totalHeight >= B){
            minExcess = Math.min(minExcess, totalHeight - B);
            return;
        }

        if(idx >= N){
            return;
        }

        dfs(idx + 1, totalHeight + H[idx]);
        dfs(idx + 1, totalHeight);
    }
}
```

#### Solution Description

The code serves to solve the problem of farmer John using the height of the cows to find the minimum excess height to reach the top of the bookshelf.

First, in the process of processing the input, the number of cows 'N' and the height 'B' of the bookshelf are read from the first line using 'BufferedReader', and then the keys of 'N' cows are stored in the array 'H'.

After completing the input, call 'dfs(0, 0)' to begin the depth-first search.

If 'totalHeight' is greater than 'B' during navigation, update the 'minExcess' value and exit.

Even if you have explored all cows, you will still meet the termination conditions and will not proceed further.

The search is then recursively conducted by dividing it into cases that include and do not include current cattle.

Finally, output the 'minExcess' value to obtain the minimum height exceeded.
