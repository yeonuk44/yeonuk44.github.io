---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
lng_pair: id-10815-number-card
title: Baekjun Number 10815 Card (with.Java)
# title: Baekjun, No.10815, Number Card (with Java)
# post specific
# if not specified, .name will be used from _data/owner/[language].yml
author: Yeonuk
# multiple categories is not supported
category: Java
# multiple tag entries are possible
tags: [java, coding test]
#thumbnailimageforpost
img: ":post_pic1.jpg"
# disable comments on this page
# comments_disable: true

# publish date
date: 2025-08-02 09:00:00 +0900
#seo
# if not specified, date will be used.
#meta_modify_date: 2021-08-10 11:32:53 +0900
# check the meta_common_description in _data/owner/[language].yml
#meta_description: ""

#optional
#please use the "image_viewer_on" below to enable image viewer for individual pages or posts (_posts/ or [language]/_posts folders).
# image viewer can be enabled or disabled for all posts using the "image_viewer_posts: true" setting in _data/conf/main.yml.
#image_viewer_on: true
#please use the "image_lazy_loader_on" below to enable image lazy loader for individual pages or posts (_posts/ or [language]/_posts folders).
# The image lazy loader can be enabled or disabled for all posts using the "image_lazy_loader_posts: true" setting in _data/conf/main.yml.
#image_lazy_loader_on: true
# exclude from on-site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---

<!-- outline-start -->

## This article explores Baekjoon Problem 10815, Number Card (with Java).

We will learn by solving coding test problems, reflecting on past problems, and exploring different solution methods.

Let's first look at the problem.

{:data-align="center"}

<!-- outline-end -->

### Problem

A number card is a card with a single integer written on it.

Sanggeun has N number cards.

Given M integers, write a program that determines whether Sanggeun has a number card with this number written on it.

#### Input

The first line contains the number N of number cards Sanggeun has (1 ≤ N ≤ 500,000).

The second line contains the integers written on the number cards.

The numbers written on the number cards are greater than or equal to -10,000,000 and less than or equal to 10,000,000.

No two number cards have the same number written on them.

The third line contains M (1 ≤ M ≤ 500,000).

The fourth line contains M integers, separated by spaces, for which the number cards must be checked.

This number is greater than or equal to -10,000,000 and less than or equal to 10,000,000.

#### Output

For the M numbers given in the first line of input, print 1 if Sanggeun has a number card with each number written on it, or 0 if not, separated by a space.

### Problem Solution

```java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.InputStreamWriter;
import java.util.HashSet;

class Main{
    public static void main(String[] args) throws IOException {
        HashSet<String> set = new HashSet<>();
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        br.readLine();
        String[] temp = br.readLine().split(" ");
        br.readLine();
        String[] card = br.readLine().split(" ");
        String[] answer = new String[card.length];
        br.close();
        for(int i = 0; i < temp.length; i++){
            set.add(temp[i]);
        }
        for(int i =0; i < card.length; i++){
            if(set.contains(card[i])){
                answer[i] = "1";
            }else{
                answer[i] = "0";
            }
        }
        for(String str : answer){
            bw.write(str + " ");
        }
        bw.flush();
        bw.close();
    }
}
```

#### Solution Explanation

This function compares two string arrays to determine if they intersect, and outputs the result.

First, during input processing, it uses a BufferedReader to read the two arrays, compares their elements, and outputs the result.

For efficient set operations, it uses a HashSet to efficiently handle input and output.

This allows you to quickly check for intersection between two arrays and output the result.

Thank you!
