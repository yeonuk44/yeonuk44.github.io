---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
lng_pair: id-10816-number-card-2
title: Baekjun number 10816, number card 2 (with.Java)
# title: Baekjoon 10816, Number Card 2 (with Java)
# post specific
# if not specified, .name will be used from _data/owner/[language].yml
author: Yeonuk
# multiple categories is not supported
category: Java
# multiple tag entries are possible
tags: [java, coding test]
#thumbnailimageforpost
img: ":post_pic1.jpg"
# disable comments on this page
# comments_disable: true

# publish date
date: 2025-08-05 09:00:00 +0900
#seo
# if not specified, date will be used.
#meta_modify_date: 2021-08-10 11:32:53 +0900
# check the meta_common_description in _data/owner/[language].yml
#meta_description: ""

#optional
#please use the "image_viewer_on" below to enable image viewer for individual pages or posts (_posts/ or [language]/_posts folders).
# image viewer can be enabled or disabled for all posts using the "image_viewer_posts: true" setting in _data/conf/main.yml.
#image_viewer_on: true
#please use the "image_lazy_loader_on" below to enable image lazy loader for individual pages or posts (_posts/ or [language]/_posts folders).
# The image lazy loader can be enabled or disabled for all posts using the "image_lazy_loader_posts: true" setting in _data/conf/main.yml.
#image_lazy_loader_on: true
# exclude from on-site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---

<!-- outline-start -->

## This article explores Baekjoon Problem 10816, Number Card 2 (with Java).

We will learn by solving coding test problems, reflecting on previous problems, and exploring different solution methods.

Let's first look at the problem.

{:data-align="center"}

<!-- outline-end -->

### Problem

A number card is a card with a single integer written on it.

Sanggeun has N number cards.

Given M integers, write a program that calculates how many number cards Sanggeun has.

#### Input

The first line contains the number N of number cards Sanggeun has (1 ≤ N ≤ 500,000).

The second line contains the integers written on the number cards.

The numbers written on the number cards are greater than or equal to -10,000,000 and less than or equal to 10,000,000.

The third line contains M (1 ≤ M ≤ 500,000).

The fourth line contains M integers, separated by spaces, for which the number cards Sanggeun has to be calculated.

This number is greater than or equal to -10,000,000 and less than or equal to 10,000,000.

#### Output

For the M numbers given in the first line of input, print the number of cards Sanggeun has, separated by spaces.

### Problem Solution

```java
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.valueOf(br.readLine());
        String[] cards = br.readLine().split(" ");
        HashMap<String, Integer> map = new HashMap<>();
        for(int i = 0; i < N; i++){
            map.put(cards[i], map.getOrDefault(cards[i], 0) + 1);
        }
        int M = Integer.valueOf(br.readLine());
        String[] check = br.readLine().split(" ");
        br.close();
        StringBuilder sb = new StringBuilder();

        for(int i = 0; i < M; i++){
            sb.append(map.getOrDefault(check[i], 0)).append(" ");
        }

        System.out.print(sb);
    }
}
```

#### Solution explanation

First, we read the input using BufferedReader.

The first input line represents the number of cards, N, and the second is an array of strings representing the card numbers.

This stores the card numbers in a HashMap. The HashMap records the number of times each number appears.

The code map.put(cards[i], map.getOrDefault(cards[i], 0) + 1) increments the value by 1 if the number already exists in the map. Otherwise, it sets the default value to 0 and initializes it to 1.

The third input line represents the number of numbers to check, M, and the fourth is an array of numbers to check.

We check how many times each number appears in the HashMap and store the result in a StringBuilder.

map.getOrDefault(check[i], 0) returns the value if the number exists in the map, or 0 if it doesn't.

Finally, we output the result stored in the StringBuilder.

This allows us to efficiently output the number of times each number appears.
