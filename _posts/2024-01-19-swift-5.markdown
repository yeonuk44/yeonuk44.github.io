---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
lng_pair: id_About_Swift_5
title: About Swift Syntax 5 (Frequently Used Functions in Set Types)
# title: About Swift syntax 4 (frequently used functions in Array type)
# post specific
# if not specified, .name will be used from _data/owner/[language].yml
author: Yeonuk
# multiple category is not supported
category: Swift
# multiple tag entries are possible
tags: [swift, ios]
# thumbnail image for post
img: ":post_pic1.jpg"
# disable comments on this page
# comments_disable: true

# publish date
date: 2024-01-19 09:00:00 +0900
# seo
# if not specified, date will be used.
#meta_modify_date: 2021-08-10 11:32:53 +0900
# check the meta_common_description in _data/owner/[language].yml
#meta_description: ""

# optional
# please use the "image_viewer_on" below to enable image viewer for individual pages or posts (_posts/ or [language]/_posts folders).
# image viewer can be enabled or disabled for all posts using the "image_viewer_posts: true" setting in _data/conf/main.yml.
#image_viewer_on: true
# please use the "image_lazy_loader_on" below to enable image lazy loader for individual pages or posts (_posts/ or [language]/_posts folders).
# image lazy loader can be enabled or disabled for all posts using the "image_lazy_loader_posts: true" setting in _data/conf/main.yml.
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---

<!-- outline-start -->

## "Swift 문법에 대하여 4 (Array 타입에서 자주 사용되는 함수)"에 대하여

이번에 iOS에 대해 공부할 기회가 생겨 문법부터 공부하고 있었는데 이번에 이에 대해 정리하는 글을 남기고자 합니다.

이번 글에선 Array 타입에서의 다양한 함수 중 자주 사용되는 것을 소개하도록 하겠습니다.

우선 배열을 생성하는 방법에 대해서 입니다.

{:data-align="center"}

<!-- outline-end -->

### Array 생성

배열 생성 및 초기화하는 방법

#### 예시

```swift
var numbers: [Int] = [1, 2, 3]
```

### append 함수

배열의 끝에 새로운 요소를 추가합니다.

#### 예시

```swift
numbers.append(4) // numbers: [1, 2, 3, 4]
```

### count 함수

배열에 있는 요소의 개수를 반환합니다.

#### 예시

```swift
let count = numbers.count // count: 4
```

### isEmpty

배열이 비어있는지 확인합니다.

#### 예시

```swift
if numbers.isEmpty {
    print("The array is empty")
} else {
    print("The array is not empty")
}
// 출력: The array is not empty
```

### insert

지정된 인덱스에 요소를 삽입합니다.

#### 예시

```swift
numbers.insert(0, ar: 0) // numbers: [0,1,2,3,4]
```

### remove

지정된 인덱스의 요소를 제거합니다.

#### 예시

```swift
numbers.remove(at: 0) // numbers: [1,2,3,4]
```

### subscripting

인덱스를 사용하여 배열의 요소에 접근하거나 수정합니다.

#### 예시

```swift
let firstNumber = numbers[0] // firstNumber: 1
numbers[2] = 5 // numbers: [1,2,5,4]
```

### contains

특정 요소가 배열에 있는지 확인합니다.

#### 예시

```swift
if numbers.contains(5) {
    print("Contains 5!")
}
// 출력: Contains 5!
```

### first와 last

배열의 첫 번째와 마지막 요소에 접근합니다. 배열이 비어있는 경우 'nil'을 반환합니다.

#### 예시

```swift
let first = numbers.first // first: Optional(1)
let last = numbers.last // last: Optional(4)
```

### map, filter, reduce

함수형 프로그래밍의 패러다임을 사용하여 배열을 변환, 필터링, 누적 등을 수행할 수 있습니다.

#### 예시

```swift
let doubled = numbers.map { $0 * 2 } // doubled: [2, 4, 10, 8]
let evenNumbers = numbers.filter { $0 % 2 == 0 } // evenNumbers: [2, 4]
let sum = numbers.reduce(0, +) // sum: 12
```

### 함수형 프로그래밍 특징

복잢겅을 관리하고 코드의 재사용성과 테스트 용이성을 높이며, 멀티 쓰레드 환경에서도 더 안정적인 코드를 작성할 수 있게 해줍니다.
