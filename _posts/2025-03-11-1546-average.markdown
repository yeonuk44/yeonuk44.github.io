---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
lng_pair: id-1546-average
title: Baekjun, 1546, average (with.Java)
# title: Baekjun, 1546, average (with.Java)
# post specific
# if not specified, .name will be used from _data/owner/[language].yml
author: Yeonuk
# multiple category is not supported
category: Java
# multiple tag entries are possible
tags: [java, coding test]
# thumbnail image for post
img: ":post_pic1.jpg"
# disable comments on this page
# comments_disable: true

# publish date
date: 2025-03-11 09:00:00 +0900
# seo
# if not specified, date will be used.
#meta_modify_date: 2021-08-10 11:32:53 +0900
# check the meta_common_description in _data/owner/[language].yml
#meta_description: ""

# optional
# please use the "image_viewer_on" below to enable image viewer for individual pages or posts (_posts/ or [language]/_posts folders).
# image viewer can be enabled or disabled for all posts using the "image_viewer_posts: true" setting in _data/conf/main.yml.
#image_viewer_on: true
# please use the "image_lazy_loader_on" below to enable image lazy loader for individual pages or posts (_posts/ or [language]/_posts folders).
# image lazy loader can be enabled or disabled for all posts using the "image_lazy_loader_posts: true" setting in _data/conf/main.yml.
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---

<!-- outline-start -->

## Baekjun, 1546, average (with.J)

## Baekjun No. 1546, this is an article about the mean (with.Java).

I want to solve the coding test problem, find out how to solve it differently from the retrospective of the problem I solved, and get to know.

Let's get to the problem first.

{:data-align="center"}

<!-- outline-end -->

### Problem

Sejun messed up his final exam.

Sejun decided to manipulate the score and take it home.

First of all, Sejun chose the maximum value among his scores.

This value is called M. Then all scores were corrected to score /M\*100.

For example, if Sejun's highest score is 70 and his math score is 50, his math score is 50/70\*100, which is 71.43 points.

When Sejun's grades are newly calculated according to the above method, write a program to find a new average.

#### Input

In the first line, the number N of subjects taken is given.

This value is less than or equal to 1000. The second line gives Sejun's current grades.

This value is an integer that is less than or equal to 100, and at least one value is greater than 0.

#### Output

Output a new average on the first line.

If the absolute or relative error between the actual correct answer and the output value is 10-2 or less, it is correct.

### problem solving

```java
import java.io.*;
import java.util.*;

class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        ArrayList<Integer> list = new ArrayList<>();
        float high_score = 0;
        float avg_score = 0;
        br.readLine();

        StringTokenizer st = new StringTokenizer(br.readLine());
        while (st.hasMoreTokens()) {

            list.add(Integer.valueOf(st.nextToken()));
        }

        for(int i = 0; i < list.size(); i++) {
            if(high_score <= list.get(i)){
                high_score = list.get(i);
            }
        }

        for(int i = 0; i < list.size(); i++) {
            avg_score += list.get(i)/high_score*100;
        }

        bw.write(avg_score/list.size() + "\n");
        br.close();
        bw.flush();
        bw.close();
    }
}
```

#### Solution Description

First, use 'BufferedReader' to receive input and use 'ArrayList<Integer>' to save the score list.

Do not use the first input line, but use the 'StringTokenizer' to separate the spaces in the second line and add them to the list.

After that, I go around the list and look for the highest score.

The first set 'high_score' value is 0, and it stores the highest value by comparing each value in the list.

Next, there is a process of calculating the new average.

Divide each score by the highest score and multiply by 100 to obtain the converted score, sum these values, and divide them by the list size to calculate the final average.

Finally, the average is output using 'BufferedWriter', and the input and output streams are organized using 'br.close()' and 'bw.flush()' and 'bw.close().

Note that if 'high_score' is 0, then 'ArithmeticalException' can occur in the division operation.

Therefore, you must update the value properly in the process of finding the 'high_score'.

In addition, more stable results can be obtained by changing the type of list to 'Float' to increase the computational accuracy.

The output format can be readable by adjusting the decimal places, for which you can use 'String.format("%.2f")'.

I've also written an improved code. I hope it's a reference.
