---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
lng_pair: id_About_365_Games
title: 369 games (with.Java)
# title: 369 games (with.Java)
# post specific
# if not specified, .name will be used from _data/owner/[language].yml
author: Yeonuk
# multiple category is not supported
category: Java
# multiple tag entries are possible
tags: [java, coding test]
# thumbnail image for post
img: ":post_pic1.jpg"
# disable comments on this page
# comments_disable: true

# publish date
date: 2024-02-20 09:00:00 +0900
# seo
# if not specified, date will be used.
#meta_modify_date: 2021-08-10 11:32:53 +0900
# check the meta_common_description in _data/owner/[language].yml
#meta_description: ""

# optional
# please use the "image_viewer_on" below to enable image viewer for individual pages or posts (_posts/ or [language]/_posts folders).
# image viewer can be enabled or disabled for all posts using the "image_viewer_posts: true" setting in _data/conf/main.yml.
#image_viewer_on: true
# please use the "image_lazy_loader_on" below to enable image lazy loader for individual pages or posts (_posts/ or [language]/_posts folders).
# image lazy loader can be enabled or disabled for all posts using the "image_lazy_loader_posts: true" setting in _data/conf/main.yml.
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---

<!-- outline-start -->

## "Control 'Z'" 문제에 대하여 알아본 글입니다.

코딩 테스트 문제를 풀며, 풀었던 문제에 대한 회고와 다른 풀이 방법을 알아보며, 알아가고자 합니다.

문제에 대해 먼저 알아보겠습니다.

{:data-align="center"}

<!-- outline-end -->

### 문제

숫자와 "Z"가 공백으로 구분되어 담긴 문자열이 주어집니다.

문자열에 있는 숫자를 차례대로 더하려고 합니다.

이 때 "Z"가 나오면 바로 전에 더했던 숫자를 뺀다는 뜻입니다.

숫자와 "Z"로 이루어진 문자열 s가 주어질 때, 머쓱이가 구한 값을 return 하도록 solution 함수를 완성해보세요.

#### 제한사항

- 1 ≤ s의 길이 ≤ 200
- -1,000 < s의 원소 중 숫자 < 1,000
- s는 숫자, "Z", 공백으로 이루어져 있습니다.
- s에 있는 숫자와 "Z"는 서로 공백으로 구분됩니다.
- 연속된 공백은 주어지지 않습니다.
- 0을 제외하고는 0으로 시작하는 숫자는 없습니다.
- s는 "Z"로 시작하지 않습니다.
- s의 시작과 끝에는 공백이 없습니다.
- "Z"가 연속해서 나오는 경우는 없습니다.

#### 입출력 예시

| s             | result |
| ------------- | ------ |
| "1 2 Z 3"     | 4      |
| "10 20 30 40" | 100    |

<!-- | start_num | end_num | result |
| --------- | ------- | ------ |
| 10        | 3       | 0      | -->

### 문제에 대한 나의 풀이

```java
class Solution {
    public int solution(String s) {
        int answer = 0;
        String[] temp = s.split(" ");
        int tempInt = 0;
        for(String a : temp){
            if(a.equals("Z")){
                answer -= tempInt;
            } else{
                answer += Integer.parseInt(a);
                tempInt = Integer.parseInt(a);
            }
        }
        return answer;
    }
}
```

### 풀이 설명

- 문자열 분리: s.split(" ")를 통해 주어진 문자열 s를 공백을 기준으로 분리하여 문자열 배열 temp에 저장한다.
- 숫자 및 'Z' 처리: for문을 통해 배열 temp를 순회하면서, 각 요소가 'Z'인 경우 이전에 저장된 값 tempInt를 현재까지의 합 answer에서 빼주고, 숫자인 경우 정수로 변환하여 현재까지의 합에 더해준다.
- 이전 값 기억: 'Z'가 나올 때마다 현재까지의 합에서 빼기를 수행하므로, 그 이전에 저장된 정수 값을 tempInt에 기억하여 활용한다.

**코드 장점**

- 간단한 로직: 간단한 패턴을 이용하여 문자열을 처리하고, 합을 계산하는 로직이 직관적이다.
- 배열 활용: 문자열을 분리하여 배열에 저장함으로써 각 요소를 순차적으로 처리할 수 있다.

**코드 단점**

- 오류 처리 부족: 'Z'가 나오는 경우와 숫자가 나오는 경우만을 고려하고 있으며, 입력값에 대한 오류 처리가 부족하다. 유효성 검사 등을 추가하는 것이 좋다.
- 분리 기준 고정: 현재 코드에서는 공백을 기준으로 문자열을 분리하고 있으나, 이 외의 다양한 경우에 대한 고려가 없다. 입력 데이터의 형식에 따라 다양한 경우를 처리하는 로직을 추가하는 것이 필요하다.
