---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
lng_pair: id_About_Hate_Same_Numbers
title: 같은 숫자는 싫어 (with.Java)
# title: I hate same numbers (with.Java)
# if not specified, .name will be used from _data/owner/[language].yml
author: Yeonuk
# multiple category is not supported
category: Java
# multiple tag entries are possible
tags: [java, coding test, stack]
# thumbnail image for post
img: ":post_pic1.jpg"
# disable comments on this page
# comments_disable: true

# publish date
date: 2024-06-05 09:00:00 +0900
# seo
# if not specified, date will be used.
#meta_modify_date: 2021-08-10 11:32:53 +0900
# check the meta_common_description in _data/owner/[language].yml
#meta_description: ""

# optional
# please use the "image_viewer_on" below to enable image viewer for individual pages or posts (_posts/ or [language]/_posts folders).
# image viewer can be enabled or disabled for all posts using the "image_viewer_posts: true" setting in _data/conf/main.yml.
#image_viewer_on: true
# please use the "image_lazy_loader_on" below to enable image lazy loader for individual pages or posts (_posts/ or [language]/_posts folders).
# image lazy loader can be enabled or disabled for all posts using the "image_lazy_loader_posts: true" setting in _data/conf/main.yml.
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---

<!-- outline-start -->

## "베스트앨범 (with.Java)" 문제에 대하여 알아본 글입니다.

코딩 테스트 문제를 풀며, 풀었던 문제에 대한 회고와 다른 풀이 방법을 알아보며, 알아가고자 합니다.

문제에 대해 먼저 알아보겠습니다.

{:data-align="center"}

<!-- outline-end -->

### 문제

스트리밍 사이트에서 장르 별로 가장 많이 재생된 노래를 두 개씩 모아 베스트 앨범을 출시하려 합니다.

노래는 고유 번호로 구분하며, 노래를 수록하는 기준은 다음과 같습니다.

- 속한 노래가 많이 재생된 장르를 먼저 수록합니다.
- 장르 내에서 많이 재생된 노래를 먼저 수록합니다.
- 장르 내에서 재생 횟수가 같은 노래 중에서는 고유 번호가 낮은 노래를 먼저 수록합니다.
- 노래의 장르를 나타내는 문자열 배열 genres와 노래별 재생 횟수를 나타내는 정수 배열 plays가 주어질 때, 베스트 앨범에 들어갈 노래의 고유 번호를 순서대로 return 하도록 solution 함수를 완성하세요.

#### 제한사항

- genres[i]는 고유번호가 i인 노래의 장르입니다.
- plays[i]는 고유번호가 i인 노래가 재생된 횟수입니다.
- genres와 plays의 길이는 같으며, 이는 1 이상 10,000 이하입니다.
- 장르 종류는 100개 미만입니다.
- 장르에 속한 곡이 하나라면, 하나의 곡만 선택합니다.
- 모든 장르는 재생된 횟수가 다릅니다.

#### 입출력 예시

<!--
| lines                     | result |
| ------------------------- | ------ |
| [[0, 1], [2, 5], [3, 9]]  | 2      |
| [[-1, 1], [1, 3], [3, 9]] | 0      |
| [[0, 5], [3, 9], [1, 10]] | 8      | -->

| genres                                          | plays                      | return       |
| ----------------------------------------------- | -------------------------- | ------------ |
| ["classic", "pop", "classic", "classic", "pop"] | [500, 600, 150, 800, 2500] | [4, 1, 3, 0] |

### 문제에 대한 나의 풀이

```java
import java.util.*;

class Solution {
    public int[] solution(String[] genres, int[] plays) {
        HashMap<String, Integer> map = new HashMap<>();
        for(int i = 0; i < genres.length; i++){
            map.put(genres[i], map.getOrDefault(genres[i], 0) + plays[i]);
        }

        ArrayList<String> arrStringList = new ArrayList<>();
        for(String key : map.keySet()){
            arrStringList.add(key);
        }
        Collections.sort(arrStringList, (key_1, key_2) -> map.get(key_2) - map.get(key_1));

        ArrayList<Integer> arrIntegerList = new ArrayList<>();
        for(int i = 0; i < arrStringList.size(); i++){
            String str = arrStringList.get(i);
            int max = 0;
            int idx_0 = -1;
            for(int j = 0; j < genres.length; j++){
                if(str.equals(genres[j]) && max < plays[j]){
                    max = plays[j];
                    idx_0 = j;
                }
            }

            max = 0;
            int idx_1 = -1;
            for(int j = 0; j < genres.length; j++){
                if(str.equals(genres[j]) && max < plays[j] && idx_0 != j){
                    max = plays[j];
                    idx_1 = j;
                }
            }

            arrIntegerList.add(idx_0);
            if(idx_1 > -1){
                arrIntegerList.add(idx_1);
            }
        }

        int[] answer = new int[arrIntegerList.size()];
        for(int i = 0; i < arrIntegerList.size(); i++){
            answer[i] = arrIntegerList.get(i);
        }
        return answer;
    }
}
```

### 풀이 리뷰

solution 메서드는 두 개의 배열 genres와 plays를 입력으로 받습니다.

첫 번째 for 루프에서는 각 장르별로 총 재생 횟수를 계산하기 위해 HashMap<String, Integer> 객체 map을 사용합니다. 여기서 key는 장르를, value는 해당 장르의 총 재생 횟수를 나타냅니다.

두 번째 for 루프에서는 map에 저장된 장르를 재생 횟수에 따라 내림차순으로 정렬하기 위해 ArrayList<String>에 장르를 추가합니다.

내림차순 정렬은 Collections.sort()를 사용하고, 람다식을 활용하여 정렬 기준을 설정합니다.

세 번째 for 루프에서는 각 장르별로 가장 많이 재생된 노래와 그 다음으로 많이 재생된 노래의 인덱스를 찾습니다. 이를 위해 각 장르에 대해 가장 많이 재생된 노래와 그 다음으로 많이 재생된 노래의 인덱스를 찾습니다.

각 장르별로 가장 많이 재생된 노래의 인덱스를 ArrayList<Integer>에 추가하고, 그 다음으로 많이 재생된 노래의 인덱스도 추가합니다.

마지막으로 ArrayList<Integer>를 배열로 변환하여 결과를 반환합니다.
이 코드는 각 장르별로 가장 많이 재생된 노래와 그 다음으로 많이 재생된 노래의 인덱스를 찾아 반환하는 문제를 해결합니다.
